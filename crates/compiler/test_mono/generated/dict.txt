procedure Dict.1 (Dict.556):
    let Dict.566 : List {[], []} = Array [];
    let Dict.33 : List U64 = CallByName Dict.33;
    let Dict.32 : List I8 = CallByName Dict.32;
    let Dict.565 : {List {[], []}, List U64, List I8} = Struct {Dict.566, Dict.33, Dict.32};
    ret Dict.565;

procedure Dict.32 ():
    let Dict.568 : I8 = CallByName Dict.43;
    let Dict.569 : I8 = CallByName Dict.43;
    let Dict.570 : I8 = CallByName Dict.43;
    let Dict.571 : I8 = CallByName Dict.43;
    let Dict.572 : I8 = CallByName Dict.43;
    let Dict.573 : I8 = CallByName Dict.43;
    let Dict.574 : I8 = CallByName Dict.43;
    let Dict.575 : I8 = CallByName Dict.43;
    let Dict.567 : List I8 = Array [Dict.568, Dict.569, Dict.570, Dict.571, Dict.572, Dict.573, Dict.574, Dict.575];
    ret Dict.567;

procedure Dict.33 ():
    let Dict.577 : List U64 = Array [0i64, 0i64, 0i64, 0i64, 0i64, 0i64, 0i64, 0i64];
    ret Dict.577;

procedure Dict.4 (Dict.563):
    let Dict.111 : List {[], []} = StructAtIndex 0 Dict.563;
    let #Derived_gen.1 : List U64 = StructAtIndex 1 Dict.563;
    dec #Derived_gen.1;
    let #Derived_gen.0 : List I8 = StructAtIndex 2 Dict.563;
    dec #Derived_gen.0;
    let Dict.564 : U64 = CallByName List.6 Dict.111;
    dec Dict.111;
    ret Dict.564;

procedure Dict.43 ():
    let Dict.576 : I8 = -128i64;
    ret Dict.576;

procedure List.6 (#Attr.2):
    let List.553 : U64 = lowlevel ListLen #Attr.2;
    ret List.553;

procedure Test.0 ():
    let Test.3 : {} = Struct {};
    let Test.2 : {List {[], []}, List U64, List I8} = CallByName Dict.1 Test.3;
    let Test.1 : U64 = CallByName Dict.4 Test.2;
    ret Test.1;
